# flowlang_interpreter.py

# Symbol table (where we'll store variables)
symbol_table = {}

# Function to execute the program
def execute_program(instructions):
    for instruction in instructions:
        execute_instruction(instruction)

def execute_instruction(instruction):
    # Handle each type of instruction
    if instruction[0] == 'let':
        execute_let(instruction)
    elif instruction[0] == 'show':
        execute_show(instruction)
    elif instruction[0] == 'range':
        execute_range(instruction)
    elif instruction[0] == 'if':
        execute_if(instruction)


# Function to evaluate expressions
def evaluate_expression(expr):
    try:
        return eval(expr)
    except Exception as e:
        raise ValueError(f"Invalid expression: {expr}. Error: {str(e)}")

def execute_let(instruction):
    # 'let' statement: ('let', variable_name, value)
    variable_name = instruction[1]
    expression = instruction[2]  # This can be an expression
    value = evaluate_expression(expression)
    symbol_table[variable_name] = value
    print(f"Assigned {variable_name} = {value}")

def execute_show(instruction):
    # 'show' statement: ('show', expression)
    expression = instruction[1]  # This can be an expression
    value = evaluate_expression(expression)
    print(value)

def execute_range(instruction):
    # 'range' statement: ('range', start, end, block_of_instructions)
    start = instruction[1]
    end = instruction[2]
    block_of_instructions = instruction[3]
    
    if start > end:
        raise ValueError(f"Invalid range: start ({start}) should be less than or equal to end ({end}).")
    
    for i in range(start, end + 1):
        print(f"Range iteration {i}:")
        execute_program(block_of_instructions)

def execute_if(instruction):
    # 'if' statement: ('if', condition, block_of_instructions)
    condition = instruction[1]
    block_of_instructions = instruction[2]
    
    # Evaluate the condition (True/False)
    if evaluate_expression(condition):
        print("If condition is True, executing block:")
        execute_program(block_of_instructions)
    else:
        print("If condition is False, skipping block.")
